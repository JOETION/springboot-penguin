<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qexz.dao.PostMapper">
    <resultMap id="BaseResultMap" type="com.qexz.model.Post">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="author_id" property="authorId" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="html_content" property="htmlContent" jdbcType="LONGVARCHAR"/>
        <result column="text_content" property="textContent" jdbcType="LONGVARCHAR"/>
        <result column="last_reply_time" property="lastReplyTime" jdbcType="TIMESTAMP"/>
        <result column="reply_num" property="replyNum" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, author_id, html_content, text_content, create_time,
        update_time, last_reply_time, reply_num, title,type
    </sql>

    <insert id="insertPost" parameterType="com.qexz.model.Post">
        insert into t_penguin_post
        (author_id, title, html_content, text_content,type)
        values (#{post.authorId}, #{post.title}, #{post.htmlContent}, #{post.textContent},#{post.type})
    </insert>

    <update id="updatePostById" parameterType="com.qexz.model.Post">
        UPDATE t_penguin_post
        SET
          title = #{post.title}, html_content = #{post.htmlContent}, text_content = #{post.textContent},type=#{post.type}
        WHERE
        id = #{post.id}
    </update>

    <select id="getPostById" resultMap="BaseResultMap" parameterType="int">
        SELECT
        *
        FROM t_penguin_post
        WHERE id = #{id}
    </select>

    <update id="deletePostById" parameterType="int">
        UPDATE t_penguin_post
        SET deleted=1
        WHERE id=#{id}
    </update>

    <select id="getCount" resultType="int">
        SELECT
        COUNT(1)
        FROM t_penguin_post
        WHERE deleted=0
        <if test="type!=-1">
            AND type=#{type}
        </if>
    </select>

    <select id="getPosts" resultMap="BaseResultMap">
        SELECT
        *
        FROM t_penguin_post
        WHERE deleted=0
        <if test="type!=-1">
            AND type=#{type}
        </if>
        <choose>
            <when test="level==0">ORDER BY last_reply_time DESC</when>
            <when test="level==1">ORDER BY create_time DESC</when>
            <when test="level==2">ORDER BY reply_num DESC</when>
        </choose>
    </select>

    <update id="updateReplyNumById">
        UPDATE t_penguin_post
        SET
         reply_num = reply_num + 1, last_reply_time = #{lastReplyTime}
        WHERE
        id = #{id} AND deleted=0
    </update>

    <select id="getCountByAuthorId" resultType="int">
        SELECT
        COUNT(1)
        FROM t_penguin_post
        WHERE author_id = #{authorId} AND deleted=0
    </select>

    <select id="getPostsByAuthorId" resultMap="BaseResultMap">
        SELECT
        *
        FROM t_penguin_post
        WHERE author_id = #{authorId} AND deleted=0
        ORDER BY last_reply_time DESC, update_time DESC, create_time DESC
    </select>

    <select id="getPostsByIds" resultMap="BaseResultMap">
        SELECT * FROM t_penguin_post
        WHERE 1=1
        <if test="ids != null and ids.size > 0">
            AND id IN
            <foreach collection="ids" item="id1" open="(" separator="," close=")">
                #{id1}
            </foreach>
        </if>
    </select>

</mapper>